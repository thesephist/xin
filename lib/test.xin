; test runner

(: (scope label cases)
   (do
     (: all-succeeded (vec::every (vec::map cases case-succeeded?)))
     (: count-succeeded (vec::size (vec::filter cases case-succeeded?)))
     (logf '{}/{}\t{}'
           (vec count-succeeded
                (vec::size cases)
                label))
     (if all-succeeded
       pass
       (vec::each cases
                  (: (f c)
                     (if (case-failed? c)
                       (logf '\t- {}\n\t  {}'
                             (vec (desc-of-case c)
                                  (assertion-of-case c)))
                       pass))))))

(: (case description assertion)
   (vec description assertion))
(: (desc-of-case c)
   (vec::get c 0))
(: (assertion-of-case c)
   (vec::get c 1))
(: (case-succeeded? c)
   (= (assertion-of-case c) 0))
(: (case-failed? c)
   (! (case-succeeded? c)))

; assertions

(: (assert result)
   (if (= result true)
     pass
     (str::fmt 'Expected true but got {}'
               (vec result))))

(: (assert-false result)
   (if (= result false)
     pass
     (str::fmt 'Expected false but got {}'
               (vec result))))

(: (assert-eq result expected)
   (if (= result expected)
     pass
     (str::fmt 'Expected {} but got {}'
               (vec expected result))))

(: approx-cap 0.000001)
(: (assert-eq-approx result expected)
   (if (< (math::abs (- result expected)) approx-cap)
     pass
     (str::fmt 'Expected approx. {} but got {}, off by >{}'
               (vec expected
                    result
                    approx-cap))))

(: (assert-eq-vec result expected)
   (if (vec::eq? result expected)
     pass
     (str::fmt 'Expected vec {} but got {}'
               (vec expected result))))

(: (assert-eq-map result expected)
   (if (map::eq? result expected)
     pass
     (str::fmt 'Expected map {} but got {}'
               (vec expected result))))
