; mathematics library

(: (abs n)
   (if (< n 0) (neg n) n))

(: pi
   (* 2 (math::asin 1)))

; Euclid's GCD algorithm
(: (gcd a b)
   ; prereq: a < b
   (do (: (sub a b)
          (if (= a 0)
            b
            (sub (% b a) a)))
     (: a (abs a))
     (: b (abs b))
     (if (> a b)
       (sub b a)
       (sub a b))))

; least common multiple using gcd
(: (lcm a b)
   (* a (/ b (gcd a b))))

(: (prime? n)
   (if (< n 2)
     false
     (do (: max (inc (int (sqrt n))))
       ((: (sub i)
           (if (= i max)
             true
             (if (factor? n i)
               false
               (sub (inc i))))) 2))))

; prime factorize natural number
(: (prime-factors n)
   ((: (sub pfs m pf)
       (if (= m 1)
         pfs
         (if (factor? m pf)
           (sub (vec::add! pfs pf)
                (/ m pf)
                pf)
           (sub pfs
                m
                (inc pf)))))
    (vec) n 2))

; factorize natural number
; for large n, may be more efficient to first
; prime-factorize and produce combinations of prime factors
(: (factors n)
   ((: (sub lower upper r)
       (if (>= (* r r) n)
         (if (= (* r r) n)
           (+ (vec::add! lower r)
              (vec::reverse upper))
           (+ lower (vec::reverse upper)))
         (if (factor? n r)
           (sub (vec::add! lower r)
                (vec::add! upper (/ n r))
                (inc r))
           (sub lower
                upper
                (inc r)))))
    (vec) (vec) 1))

(: (log base n)
   (/ (math::ln n) (math::ln base)))

; alias for (floor n) -- just (int n),
; which truncates the given decimal
(: floor int)

(: (round n)
   (int (+ n .5)))

(: (rand-int max)
   (int (* (math::rand) max)))

(: (urand-int max)
   (int (* (math::urand) max)))
