; vector and tensor arithmetic

; building blocks to allow us to compose vector ops
(: (vec-compose op)
   (: (? v w)
      (vec-reduce v
                  (: (f x acc i)
                     (vec-add! acc (op x (vec-get w i))))
                  (vec))))

(: (vec-of-size n x)
   (vec-map (seq n)
            (: (f) x)))

; aggregator functions
(: (vec-sum v)
   (vec-reduce v (: (f a b) (+ a b)) 0))
(: (vec-prod v)
   (vec-reduce v (: (f a b) (* a b)) 0))

; elementwise operators
(: ++ (vec-compose +))
(: -- (vec-compose -))
(: ** (vec-compose *))
(: // (vec-compose /))

; scalar operators
(: (v+ v s)
   (++ v (vec-of-size (vec-size v) s)))
(: (v- v s)
   (-- v (vec-of-size (vec-size v) s)))
(: (v* v s)
   (** v (vec-of-size (vec-size v) s)))
(: (v/ v s)
   (// v (vec-of-size (vec-size v) s)))

; dot and cross products
(: (vec-dot v w)
   (vec-sum (** v w)))
