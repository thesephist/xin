; standard library

; boolean aliases
(: true 1)
(: false 0)
; want to be able to say "pass"
; on useless if-else cases, for example
(: pass 0)
(: and &)
(: or |)
(: not !)
(: (bool x)
   (if x 'true' 'false'))

; type assertions
(: (int? x)
   (= (type x) int))
(: (frac? x)
   (= (type x) frac))
(: (str? x)
   (= (type x) str))
(: (vec? x)
   (= (type x) vec))
(: (map? x)
   (= (type x) map))
(: (stream? x)
   (= (type x) stream))
(: form (type type))
(: (form? x)
   (= (type x) form))

; identity function
(: (identity x) x)

; basic io
(: (log s)
   (<- os::stdout (+ (str s) '\n')))
(: (scan)
   (-> os::stdin))

; basic math
(: (!= a b) (! (= a b)))
(: (>= a b) (! (< a b)))
(: (<= a b) (! (> a b)))
(: (sqrt x) (^ x .5))
(: (pos? n) (> n 0))
(: (neg? n) (< n 0))
(: (inc n) (+ n 1))
(: (dec n) (- n 1))
(: (factor? big small)
   (= (% big small) 0))
(: (max a b)
   (if (> a b) a b))
(: (min a b)
   (if (< a b) a b))

; iteration primitives
(: (range start end step)
   (do (: (sub i acc)
          (if (< i end)
            (do (vec::add! acc i)
              (sub (+ i step) acc))
            acc))
     (sub start (vec))))

(: (seq n)
   (range 0 n 1))

(: (loop n f)
   (do (: (sub i)
          (if (< i n)
            (do (f i)
              (sub (+ i 1)))
            0))
     (sub 0)))

; set abstraction over map
(: (set)
   (map))
(: (set::add! s v)
   (map::set! s v 0))
(: set::del! map::del!)
(: set::has? map::has?)
(: set::size map::size)
(: set::items map::keys)
