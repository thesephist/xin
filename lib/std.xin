; xin standard library
; included by default into the built executable binary

; boolean aliases
(: true 1)
(: false 0)
(: (bool x)
   (if (= false x)
     'false' 'true'))

; basic io
(: (log s)
   (<- os::stdout (+ (str s) '\n')))
(: (scan)
   (-> os::stdin))

; basic math
(: (sqrt x) (^ x .5))
(: (>= a b) (! (< a b)))
(: (<= a b) (! (> a b)))
(: (pos? n) (> n 0))
(: (neg? n) (< n 0))
(: (factor? big small)
   (= (% big small) 0))

; iteration primitives: range, times
(: (range start end step)
   (do (: (sub i acc)
          (if (< i end)
            (do (vec-add! acc i)
              (sub (+ i step) acc))
            acc))
     (sub start (vec))))

(: (seq n)
   (range 0 n 1))

; vec functions
(: (vec-reduce v f acc)
   (do
     (: max (vec-size v))
     (: (sub i acc)
        (if (< i max)
          (sub (+ i 1)
               (f (vec-get v i) acc i))
          acc))
     (sub 0 acc)))

(: (vec-each v f)
   (do
     (: max (vec-size v))
     (: (sub i)
        (if (< i max)
          (do (f (vec-get v i) i)
            (sub (+ i 1)))
          0))
     (sub 0)))

(: (vec-map v f)
   (vec-reduce v
               (: (g x acc i)
                  (vec-add! acc (f x i)))
               (vec)))

(: (vec-filter v f)
   (vec-reduce v
               (: (g x acc i)
                  (if (f x i)
                    (vec-add! acc x)
                    acc))
               (vec)))

; set abstraction over map
(: (set)
   (map))
(: (set-add! v)
   (map-set! v 0))
(: (set-del! v)
   (map-del! v))
(: (set-has v)
   (if (= (map-get v) 0)
     true
     false))

; string manipulations
(: (str-reduce s f acc)
   (do
     (: max (str-size v))
     (: (sub i acc)
        (if (< i max)
          (sub (+ i 1)
               (f (str-get v i) acc i))
          acc))
     (sub 0 acc)))

(: (str-join-vec v pad)
   (vec-reduce v
               (: (g s t)
                  (+ s t))
               pad))

(: (str-index? s sub) 0)

(: (str-split s delim) 0)

(: (str-has? s sub) 0)

(: (str-prefix? s sub) 0)

(: (str-suffix? s sub) 0)
