; vec standard library

(: (vec-head v)
   (vec-get v 0))

(: (vec-tail v)
   (vec-slice v 1 (vec-size v)))

(: (vec-last v)
   (vec-get v (- (vec-size v) 1)))

(: (vec-empty? v)
   (= (vec-size v) 0))

(: (vec-eq? v w)
   (if (= (vec-size v) (vec-size w))
     (vec-reduce v
                 (: (f x acc i)
                    (& acc (= x (vec-get w i))))
                 true)
     false))

(: (vec-reverse v)
   (if (vec-empty? v)
     (vec)
     (vec-add! (vec-reverse (vec-tail v))
               (vec-head v))))

(: (vec-cat v w)
   (do (: (sub v w)
          (if (vec-empty? w)
            v
            (sub (vec-add! v (vec-head w)) (vec-tail w))))
     (sub (vec-clone v) w)))

(: (vec-reduce v f acc)
   (do
     (: max (vec-size v))
     (: (sub i acc)
        (if (< i max)
          (sub (+ i 1)
               (f (vec-get v i) acc i))
          acc))
     (sub 0 acc)))

(: (vec-each v f)
   (do
     (: max (vec-size v))
     (: (sub i)
        (if (< i max)
          (do (f (vec-get v i) i)
            (sub (+ i 1)))
          0))
     (sub 0)))

(: (vec-map v f)
   (vec-reduce v
               (: (g x acc i)
                  (vec-add! acc (f x i)))
               (vec)))

; the fastest way to clone a xin vec
; is to use the native vec-slice
(: (vec-clone v)
   (vec-slice v 0 (vec-size v)))

(: (vec-filter v f)
   (vec-reduce v
               (: (g x acc i)
                  (if (f x i)
                    (vec-add! acc x)
                    acc))
               (vec)))

; quicksort using hoare partition
(: (vec-sort-by v pred)
   (do (: size (vec-size v))
     (: v-pred (vec-map v pred))
     (: (swap! i j)
        (do
          (: tmp (vec-get v i))
          (: tmp-pred (vec-get v-pred i))
          (vec-set! v i (vec-get v j))
          (vec-set! v j tmp)
          (vec-set! v-pred i (vec-get v-pred j))
          (vec-set! v-pred j tmp-pred)))
     (: (partition v lo hi)
        (do (: pivot (vec-get v-pred lo))
          (: (lsub i)
             (if (>= (vec-get v-pred i) pivot)
               i (lsub (+ i 1))))
          (: (rsub j)
             (if (<= (vec-get v-pred j) pivot)
               j (rsub (- j 1))))
          (: (sub i j)
             (do
               (: i (lsub i))
               (: j (rsub j))
               (if (>= i j)
                 j
                 (do (swap! i j)
                   (sub (+ i 1) (- j 1))))))
          (sub lo hi)))
     (: (quicksort v lo hi)
        (if (vec-empty? v)
          v
          (if (< lo hi)
            (do (: p (partition v lo hi))
              (quicksort v lo p)
              (quicksort v (+ p 1) hi))
            v)))
     (quicksort v 0 (- size 1))))

(: (vec-sort! v)
   (vec-sort-by v identity))
(: (vec-sort v)
   (vec-sort! (vec-clone v)))
