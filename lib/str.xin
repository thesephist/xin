; str standard library

(: (blank? s)
   (= s ''))

(: (reverse s)
   (if (blank? s)
     ''
     (+ (reverse (str::slice s 1 (str::size s)))
        (str::get s 0))))

(: (reduce s f acc)
   (do
     (: max (str::size s))
     (: (sub i acc)
        (if (< i max)
          (sub (+ i 1)
               (f (str::get s i) acc i))
          acc))
     (sub 0 acc)))

; because we'll use map as a function name here,
; alias the buitlin map function
(: map::new map)
(: (map s f)
   (reduce s
           (: (g c acc i)
              (+ acc (f c i)))
           ''))

(: (filter s f)
   (reduce s
           (: (g c acc i)
              (if (f c i)
                (+ acc c)
                acc))
           ''))

(: (join v pad)
   (if (vec::empty? v)
     ''
     (vec::reduce (vec::tail v)
                  (: (f s acc)
                     (+ acc (+ pad s)))
                  (vec::head v))))

(: (index s sub)
   (do (: (rec i)
          (if (> i (str::size s))
            -1
            (if (= (str::slice s i (+ i (str::size sub))) sub)
              i
              (rec (+ i 1)))))
     (rec 0)))

(: (has? s sub)
   (> (index s sub) -1))

(: (prefix? s sub)
   (= sub (str::slice s
                      0
                      (str::size sub))))

(: (suffix? s sub)
   (= sub (str::slice s
                      (- (str::size s) (str::size sub))
                      (str::size s))))

; utility to check ascii ranges
(: (is-in-range n min max)
   (& (>= n min) (<= n max)))

(: (digit? s)
   (is-in-range (str::enc s) 48 57))

(: (upper? s)
   (is-in-range (str::enc s) 65 90))

(: (lower? s)
   (is-in-range (str::enc s) 97 122))

(: (letter? s)
   (| (upper? s) (lower? s)))

(: (upcase s)
   (map s
        (: (f c)
           (if (lower? c)
             (str::dec (- (str::enc c) 32))
             c))))

(: (downcase s)
   (map s
        (: (f c)
           (if (upper? c)
             (str::dec (+ (str::enc c) 32))
             c))))

(: (replace s old new)
   (if (= (: idx (index s old)) -1)
     s
     (replace (+ (str::slice s 0 idx)
                 (+ new
                    (str::slice s
                                (+ idx (str::size old))
                                (str::size s))))
              old new)))

(: (split s delim)
   (do (: (sub substr sublist)
          (if (= (: idx (index substr delim)) -1)
            (vec::add! sublist substr)
            (sub (str::slice substr
                             (+ idx (str::size delim))
                             (str::size substr))
                 (vec::add! sublist
                            (str::slice substr
                                        0
                                        idx)))))
     (sub s (vec))))

(do (: esc (map::new))
  (map::set! esc '\n' '\\n')
  (map::set! esc '\r' '\\r')
  (map::set! esc '\t' '\\t')
  (map::set! esc '\\' '\\\\')
  (map::set! esc '\'' '\\\''))
(: (unescape s)
   (map s (: (f c)
             (if (map::has? esc c)
               (map::get esc c)
               c))))
