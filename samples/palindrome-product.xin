; largest palindrome product of 3-digit numbers
; project euler: https://projecteuler.net/problem=4

(: (palindrome? n)
   (= (str n) (str::reverse (str n))))

; simple solution, but doesn't scale...
(: (palindrome-prods-between v w)
   (vec::filter (vec::combine v w (: (f a b) (* a b))) palindrome?))

(: (max-palindrome-prod-between v w)
   (vec::max (palindrome-prods-between v w)))

(: (max-palindrome-prod-under n)
   (max-palindrome-prod-between (seq n) (seq n)))

(log (max-palindrome-prod-under 100))

; more memory-efficient solution
(: (next-i i j cap)
   (if (= j cap)
     (inc i)
     i))

(: (next-j i j cap)
   (if (= j cap)
     (inc i)
     (inc j)))

(: (effi-max-palindrome-prod-under n)
   (do (: (sub last-max i j)
          (if (& (= i n) (= j n))
            last-max
            (do (: product (* i j))
              (if (& (palindrome? product) (> product last-max))
                (sub product (next-i i j n) (next-j i j n))
                (sub last-max (next-i i j n) (next-j i j n))))))
     (sub 0 0 0)))

(log (effi-max-palindrome-prod-under 1000))
