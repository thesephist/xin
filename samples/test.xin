; xin test suite

(: scope test::scope)
(: case test::case)

(: assert test::assert)
(: assert-false test::assert-false)

(: eq test::assert-eq)
(: eq-approx test::assert-eq-approx)
(: eq-vec test::assert-eq-vec)
(: eq-map test::assert-eq-map)

(scope
  'Arithmetic'
  (vec
    (case 'Add two numbers'
      (eq (+ 1 1) 2))
    (case 'Subtract numbers'
      (eq (- 10 2) (- 6 -2)))
    (case 'Multiply numbers'
      (eq (* 10 2) (* 4 5)))
    (case 'Integer division'
      (eq (/ 15 4) 3))
    (case 'Fractional division'
      (eq (/ 15.0 4) 3.75))
    (case 'Power'
      (eq (^ 10 2) 100))
    (case 'Modulus'
      (eq (% 100 17) 15))
    (case 'Negative modulus'
      (eq (% -10 3) -1))
    (case 'factor? true'
      (assert (factor? 144 12)))
    (case 'factor? false'
      (assert-false (factor? 144 10)))
    (case 'even? true'
      (assert (even? 12)))
    (case 'even? false'
      (assert-false (even? 13)))
    (case 'odd? true'
      (assert (odd? 13)))
    (case 'odd? false'
      (assert-false (odd? 14)))))

(scope
  'Std'
  (vec
    (case 'Factor verification'
      (assert (factor? 12 4)))
    (case 'Factor verification, false'
      (assert-false (factor? 12 5)))
    (case 'Max comparison'
      (eq (max 10 -2) 10))
    (case 'Min comparison'
      (eq (min 300 4) 4))
    (case 'Basic range function'
      (eq-vec (range 1 6 1) (vec 1 2 3 4 5)))
    (case 'Range with step = 2'
      (eq-vec (range 10 20 2) (vec 10 12 14 16 18)))
    (case 'Range with negative start'
      (eq-vec (range -6 6 3) (vec -6 -3 0 3)))
    (case 'seq shorthand function'
      (eq-vec (seq 10) (vec 0 1 2 3 4 5 6 7 8 9)))
    (case 'Large seq function call'
      (eq (vec::size (seq 2500)) 2500))
    (case 'hex::enc single digit'
      (eq (hex::enc 10) 'a'))
    (case 'hex::enc multi digit'
      (eq (hex::enc 258) '102'))
    (case 'hex::dec single digit'
      (eq (hex::dec 'f') 15))
    (case 'hex::dec multi digit'
      (eq (hex::dec 'beef') 48879))
    (case 'hex::enc / hex::dec back and forth test'
      ; convert 500 numbers from decimal to hex and back
      (do (: randoms (vec::map (seq 500) (: (f) (math::rand-int 200000))))
        (eq-vec randoms
                (vec::map randoms
                          (: (f n)
                             (hex::dec (hex::enc (hex::dec (hex::enc n)))))))))))

(: row (vec 3 14 15 92 65 35 897))
(: (odd? x) (% x 2))
(scope
  'Vector'
  (vec
    (case 'vec::size'
      (eq (vec::size row) 7))
    (case 'vec addition'
      (eq-vec (+ (vec 1 2 3) (vec 'hi' 'hello' 'bye'))
              (vec 1 2 3 'hi' 'hello' 'bye')))
    (case 'vec::head'
      (eq (vec::head row) 3))
    (case 'vec::tail'
      (eq-vec (vec::tail row) (vec 14 15 92 65 35 897)))
    (case 'vec::last'
      (eq (vec::last row) 897))
    (case 'vec::empty?'
      (assert (vec::empty? (vec))))
    (case 'vec::empty? - false'
      (assert-false (vec::empty? (seq 100))))
    (case 'vec::eq?'
      (eq-vec (seq 10) (range 0 10 1)))
    (case 'vec::eq? - false'
      (assert-false (vec::eq? (seq 5) (vec 0 1 2 4 3))))
    (case 'vec::index 0'
      (eq (vec::index row 3) 0))
    (case 'vec::index > 0'
      (eq (vec::index row 65) 4))
    (case 'vec::index -1'
      (eq (vec::index row 100) -1))
    (case 'vec::index long vec'
      (eq (vec::index (seq 10000) 9876) 9876))
    (case 'vec::index long vec, -1'
      (eq (vec::index (seq 1000) -99) -1))
    (case 'vec::has? true'
      (assert (vec::has? row 15)))
    (case 'vec::has? false'
      (assert-false (vec::has? row 1000)))
    (case 'vec::reverse'
      (eq-vec (vec::reverse (seq 10))
              (vec 9 8 7 6 5 4 3 2 1 0)))
    (case 'vec::reduce - number sum'
      (eq (vec::reduce (seq 11) + 3) 58))
    (case 'vec::reduce - string concatenation'
      (eq (vec::reduce (vec 'hello' 'world' 'foo' 'bar') + 'start_')
          'barfooworldhellostart_'))
    (case 'vec::reverse'
      (eq-vec (vec::reverse row) (vec 897 35 65 92 15 14 3)))
    (case 'vec::map'
      (eq-vec (vec::map row odd?) (vec 1 0 1 0 1 1 1)))
    (case 'vec::filter'
      (eq-vec (vec::filter row odd?) (vec 3 15 65 35 897)))
    (case 'vec::every true'
      (eq (vec::every (vec 1 1 1 1 1)) true))
    (case 'vec::every false'
      (eq (vec::every (vec 1 1 0 1 0)) false))
    (case 'vec::some true'
      (eq (vec::some (vec 1 1 0 1 1)) true))
    (case 'vec::some false'
      (eq (vec::some (vec 0 0 0 0 0)) false))
    (case 'vec::sort'
      (eq-vec (vec::sort (vec::reverse row)) (vec 3 14 15 35 65 92 897)))
    (case 'vec::of'
      (eq-vec (vec::of 5 10) (vec 10 10 10 10 10)))
    (case 'vec::max'
      (eq (vec::max row) 897))
    (case 'vec::min'
      (eq (vec::min row) 3))
    (case 'vec::sum'
      (eq (vec::sum row) 1121))
    (case 'vec::prod'
      (eq (vec::prod (vec::slice row 0 4)) 57960))
    (case 'vec::++'
      (eq-vec (vec::++ (vec 1 2 3) (vec 90 80 70))
              (vec 91 82 73)))
    (case 'vec::v+'
      (eq-vec (vec::v+ row 100)
              (vec 103 114 115 192 165 135 997)))
    (case 'vec::flat'
      (eq-vec (vec::flat (vec row row row))
              (+ (+ row row) row)))))

(: hello 'Hello, World!\n')
(scope
  'String'
  (vec
    (case 'str::size of blank chars'
      (eq (str::size ' \n \t') 4))
    (case 'str::size'
      (eq (str::size hello) 14))
    (case 'str::slice in bounds'
      (eq (str::slice hello 4 10) 'o, Wor'))
    (case 'str::slice OOB left'
      (eq (str::slice hello -1 3) 'Hel'))
    (case 'str::slice OOB right'
      (eq (str::slice hello 8 200) 'orld!\n'))
    (case 'str::slice OOB both sides'
      (eq (str::slice hello -20 30) hello))
    (case 'str::slice OOB flush left'
      (eq (str::slice hello -5 -1) ''))
    (case 'str::slice OOB flush right'
      (eq (str::slice hello 20 30) ''))
    (case 'str::get'
      (eq (str::get hello 5) ','))
    (case 'str::get OOB left'
      (eq (str::get hello -5) false))
    (case 'str::get OOB right'
      (eq (str::get hello 100) false))
    (case 'str::get length'
      (eq (str::get hello (str::size hello)) false))
    (case 'str::blank? on non-blank'
      (eq (str::blank? hello) false))
    (case 'str::blank? on blank'
      (eq (str::blank? '') true))
    (case 'str::enc'
      (eq (str::enc 'abc') 97))
    (case 'str::dec'
      (eq (str::dec 65) 'A'))
    (case 'str::split'
      (eq-vec (str::split ', scale, by, the,bay, 2020' ', ')
              (vec '' 'scale' 'by' 'the,bay' '2020')))
    (case 'str::replace'
      (eq (str::replace ', scale, by, , ,the,bay, 2020' ', ' '-')
          '-scale-by--,the,bay-2020'))
    (case 'str::upcase'
      (eq (str::upcase 'Scale by the Bay!')
          'SCALE BY THE BAY!'))
    (case 'str::downcase'
      (eq (str::downcase 'Scale by the Bay!')
          'scale by the bay!'))
    (case 'str::pad-start single letter'
      (eq (str::pad-start 'hello' 10 '0')
          '00000hello'))
    (case 'str::pad-start multi letter'
      (eq (str::pad-start 'bye' 10 '123')
          '1231231bye'))
    (case 'str::pad-start too long'
      (eq (str::pad-start 'this is a long sentence' 10 ' ')
          'this is a long sentence'))
    (case 'str::pad-end single letter'
      (eq (str::pad-end'hello' 10 '0')
          'hello00000'))
    (case 'str::pad-end multi letter'
      (eq (str::pad-end 'bye' 10 '123')
          'bye1231231'))
    (case 'str::pad-end too long'
      (eq (str::pad-start 'this is a long sentence' 10 ' ')
          'this is a long sentence'))
    (case 'str::unescape'
      (eq (str::unescape '\n\thacker \'town\\\' \n')
          '\\n\\thacker \\\'town\\\\\\\' \\n'))))

(do (: simple-map (map))
  (map::set! simple-map 1 'first')
  (map::set! simple-map 2 'second')
  (map::set! simple-map 3 'third'))
(: mixed-vec-key
   (vec 5 3 1))
(do (: mixed-map (map))
  (map::set! mixed-map 'words' (vec 'hi' 'bye' 'aloha'))
  (map::set! mixed-map 'maps' simple-map)
  (map::set! mixed-map scope 'scope func')
  (map::set! mixed-map mixed-vec-key 'keyed by vec'))
(scope
  'Map'
  (vec
    (case 'map::size 0'
      (eq (map::size (map)) 0))
    (case 'map::size > 0'
      (eq (map::size mixed-map) 4))
    (case 'map::empty?'
      (assert (map::empty? (map))))
    (case 'map::empty? - false'
      (assert-false (map::empty? simple-map)))
    (case 'map::get - simple'
      (eq (map::get simple-map 3) 'third'))
    (case 'map::get - mixed'
      (eq-vec (map::get mixed-map 'words') (vec 'hi' 'bye' 'aloha')))
    (case 'map::get - vec key'
      (eq (map::get mixed-map mixed-vec-key)
          'keyed by vec'))
    (case 'map::get - func key'
      (eq (map::get mixed-map scope)
          'scope func'))
    (case 'map::has? - true'
      (assert (map::has? simple-map 3)))
    (case 'map::has? - false'
      (assert-false (map::has? mixed-map (vec 5 3 1))))
    (case 'map::keys'
      (assert
        (do (: keys (map::keys mixed-map))
          (& (= (vec::size keys) 4)
             (vec::every (vec::map (vec 'words'
                                        'maps'
                                        scope
                                        mixed-vec-key)
                                   (: (f k)
                                      (vec::has? keys k))))))))
    (case 'map::values'
      (assert
        (do (: vals (map::values simple-map))
          (& (= (vec::size vals) 3)
             (vec::every (vec::map (vec 'first'
                                        'second'
                                        'third')
                                   (: (f k)
                                      (vec::has? vals k))))))))
    (case 'map::entries'
      (assert
        (do (: ents (map::entries simple-map))
          (& (= (vec::size ents) 3)
             (vec::every (vec::map ents
                                   (: (f pair)
                                      (= (map::get simple-map (vec::head pair))
                                         (vec::get pair 1)))))))))))

(do (: simple-set (set))
  (set::add! simple-set 'one')
  (set::add! simple-set 'two')
  (set::add! simple-set 'three')
  (set::add! simple-set 'four'))
(scope
  'Set'
  (vec
    (case 'set::size 0'
      (eq (set::size (set)) 0))
    (case 'set::size > 0'
      (eq (set::size simple-set) 4))))

(scope
  'Math'
  (vec
    (case 'math::abs positive'
      (eq (math::abs 12) 12))
    (case 'math::abs negative'
      (eq (math::abs -34) 34))
    (case 'math::abs zero'
      (eq (math::abs 0) 0))
    (case 'math::round'
      (eq-vec (vec::map (vec 2.01 2.2 2.45 2.49 2.5 2.51 2.8 2.99 3.1) math::round)
              (vec 2 2 2 2 3 3 3 3 3)))
    (case 'math::gcd coprime'
      (eq (math::gcd 3 7) 1))
    (case 'math::gcd a > b'
      (eq (math::gcd 49 14) 7))
    (case 'math::gcd negatives'
      (eq (math::gcd -42 14) 14))
    (case 'math::gcd including 1'
      (eq (math::gcd 1 12) 1))
    (case 'math::lcm'
      (eq (math::lcm 14 49) 98))
    (case 'math::lcm coprime'
      (eq (math::lcm 7 39) 273))))

(scope
  'Data serialization'
  (vec
    (case 'simple int'
      (eq (src::serialize 42) '42'))
    (case 'simple frac'
      ; (str <frac>) will return to 8 digits, so
      ; src::serialize also does. This is fine for now.
      (eq (src::serialize -3.141592) '-3.14159200'))
    (case 'simple string'
      (eq (src::serialize 'hello world') '\'hello world\''))
    (case 'escaped string'
      (eq (src::serialize 'hello\tworld\r\n')
          '\'hello\\tworld\\r\\n\''))
    (case 'simple vec'
      (eq (src::serialize (vec 1 2 'three' 4 -5))
          '(vec 1 2 \'three\' 4 -5)'))
    (case 'nested vec'
      (eq (src::serialize (vec 'hi' 'hello' (vec 1 2.42 3.14 'four')))
          '(vec \'hi\' \'hello\' (vec 1 2.42000000 3.14000000 \'four\'))'))
    (case 'simple map'
      (assert (vec::has? (vec
                           '(do (: m (map)) (map::set! m \'hi\' 2) (map::set! m (vec 1 2) \'is vec\'))'
                           '(do (: m (map)) (map::set! m (vec 1 2) \'is vec\') (map::set! m \'hi\' 2))')
                         (src::serialize (do (: m (map))
                                           (map::set! m 'hi' 2)
                                           (map::set! m (vec 1 2) 'is vec'))))))
    (case 'stream'
      (eq (src::serialize (stream)) '(stream)'))))

(: stat-test-list (vec 1 3 24 0 4 2 2 2 2 4 3 1 2 442 235 3 23 315))
(scope
  'Statistics'
  (vec
    (case 'mean'
      (eq (stat::mean (vec 0 3 1 5 639 24)) 112))
    (case 'geomean'
      (eq-approx (stat::geomean (vec 3 1 3 3 9 1 1 27)) 3))
    (case 'median of odd list'
      (eq (stat::median (vec 13 254 2 24 0 0 3 1 2)) 2))
    (case 'median of even list'
      (eq (stat::median (vec 1 2 3 4 5 6)) 3.5))
    (case 'mode'
      (eq (stat::mode stat-test-list) 2))))
