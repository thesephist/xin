; Xin brainstorming
;
; key ideas:
; - synchronous io monads and concurrency via blocking streams and go-forms
;   all IO is done via streams, including reading and writing to and from files / network sockets,
;   signal handling, etc.
; - lazy expression simplification as a conceptual model for describing functions
;   and processes. (a b (c d)) evaluates the defined form (a . .), which then forces
;   evaluation of the value b and the form (c .), which forces eval of d.
;   - functions are called "forms", and every name in Xin is bound to either a "form"
;     (a parenthesized expression) that simplifies, or a value. Evaluating an expression
;     is recursively simplifying forms by how they were defined.

; booleans
(: true 1)
(: false 0)

; io stream
; streams are synchronous, blocking sinks and sources of values
(: (scan)
   ; source stream
   (-> os::stdin))
(: (log s)
   ; sink stream
   (<- os::stdout (+ s '\n')))
(: (err e)
   (<- os::stderr (+ s '\n')))

; "if" and lazy evaluation allows us to define "unless"
; in userspace
(: (unless c A B)
   (if c B A))

; basic number algorithms
(: (factorial n)
   (if (= n 0)
     1
     (* n (factorial (- n 1)))))
(: (fibonacci n)
   (switch n
           (0 1)
           (1 1)
           (? (+ (fibonacci (- n 1))
                 (fibonacci (- n 2))))))

(: starting-point 10)
(log (factorial starting-point))
(log (fibonacci starting-point))

; rat is a rational number data abstraction
(: (rat n d)
   (rat-canonicalize (vec 1 n d)))
(: (sign r)
   (vec-get vec 0))
(: (numerator r)
   (vec-get vec 1))
(: (denominator r)
   (vec-get vec 2))
(: (rat-canonicalize r)
   (do (: canon-sign (if (> (* (numerator r) (denominator r)) 0)
                       1
                       -1))
     (: canon-numerator (/ (numerator r) (gcd (numerator r) (denominator r))))
     (: canon-denominator (/ (denominator r) (gcd (numerator r) (denominator r))))
     (vec sign numerator denominator)))

; set abstraction from a map
(: (set)
   (map))
(: (set-add! v)
   (map-set! v 0))
(: (set-del! v)
   (map-del! v))
(: (set-has v)
   (if (= (map-get v) 0)
     true
     false))

; lambda is defined in the userspace
(: (lambda args body)
   (do (: (f ...args)
          body)
     f))

; tcp web server, streams
(: (each-of-stream source-stream callback)
   ((lambda () (if (stream::closed? source-stream)
                 0
                 (do (callback (<- source-stream))
                   (sub))))))
(: tcp-socket
   (os::net::tcp::bind 8080))
(: (respond socket req)
   (<- socket 'hello world'))
(each-of-stream tcp-socket respond)

; variadic functions
; variadic functions end their form definition with a ...identifier
; which is a list that absorbs all following arguments.
(: (sum ...numbers)
   (reduce numbers 0 +))
(: (prod ...numbers)
   (reduce numbers 1 *))
