; number of letters in 1-1000 written out
; project euler: https://projecteuler.net/problem=17

(: ones (map))
(: (add-ones n word)
   (map::set! ones n word))
(: (get-ones n)
   (map::get ones n))
(add-ones 0 '')
(add-ones 1 'one')
(add-ones 2 'two')
(add-ones 3 'three')
(add-ones 4 'four')
(add-ones 5 'five')
(add-ones 6 'six')
(add-ones 7 'seven')
(add-ones 8 'eight')
(add-ones 9 'nine')

(: tens (map))
(: (add-tens n word)
   (map::set! tens n word))
(: (get-tens n)
   (map::get tens n))
(add-tens 0 '')
(add-tens 1 'ten')
(add-tens 2 'twenty')
(add-tens 3 'thirty')
(add-tens 4 'forty')
(add-tens 5 'fifty')
(add-tens 6 'sixty')
(add-tens 7 'seventy')
(add-tens 8 'eighty')
(add-tens 9 'ninety')

; special cases that don't follow normal rules
(: special (map))
(: (add-special n word)
   (map::set! special n word))
(: (get-special n)
   (map::get special n))
(: (is-special n)
   (map::has? special n))
(add-special 11 'eleven')
(add-special 12 'twelve')
(add-special 13 'thirteen')
(add-special 14 'fourteen')
(add-special 15 'fifteen')
(add-special 16 'sixteen')
(add-special 17 'seventeen')
(add-special 18 'eighteen')
(add-special 19 'nineteen')

(: (count-digits n)
   (str::size (str n)))

(: (write-single-digit n)
   (get-ones n))

(: (write-double-digit n)
   (if (is-special n)
     (get-special n)
     (do
       (: tens-digit (% (/ n 10) 10))
       (+ (get-tens tens-digit)
          (write-number (% n 10))))))

(: (write-triple-digit n)
   (if (is-special n)
     (get-special n)
     (do (: hundreds-digit (% (/ n 100) 10))
       (: double-digit (write-number (% n 100)))
       (+ (get-ones hundreds-digit)
          (+ 'hundred'
             (if (factor? n 100)
               ''
               (+ 'and' double-digit)))))))

(: (write-quadruple-digit n)
   (if (is-special n)
     (get-special n)
     (do (: thousands-digit (% (/ n 1000) 10))
       (: hundreds-digit (% (/ (% n 1000) 100) 10))
       (: triple-digit (write-number (% n 1000)))
       (+ (get-ones thousands-digit)
          (+ 'thousand'
             (if (= hundreds-digit 0)
               (if (str::blank? triple-digit)
                 ''
                 (+ 'and' triple-digit))
               triple-digit))))))

(: (write-number n)
   (if (<= 4 (count-digits n))
     (write-quadruple-digit n)
     (if (= 3 (count-digits n))
       (write-triple-digit n)
       (if (= 2 (count-digits n))
         (write-double-digit n)
         (write-single-digit n)))))

(: (count-letters n)
   (str::size (write-number n)))

(: (letters-count-to cap)
   (vec::sum (vec::map (range 1 (inc cap) 1) count-letters)))
(log (letters-count-to 1000))
